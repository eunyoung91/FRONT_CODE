// Breakpoint Mixin
// Example usage: @include breakpoint(maxMobile) { ... }
@mixin breakpoint($point) {
	@if $point == desktop {
		@media screen and (min-width: 1100px) { @content; }
	}
	@else if $point == minDesktop {
		@media screen and (min-width: 1024px) { @content; }
	}
	@else if $point == maxMobile {
		@media screen and (min-width: 680px) { @content; }
	}
	@else if $point == minMobile {
		@media screen and (max-width: 320px) { @content; }
	}
	@else if $point == galaxyfold {
		@media screen and (min-width: 590px) and (min-height: 603px) { @content; }
	}
	@else {
		@warn "Breakpoint `#{$point}` not found. Please provide a valid value (desktop, minDesktop, maxMobile, minMobile, galaxyfold).";
	}
}

// Custom Device Mixin (for width and height)
@mixin rwdWidth($width) {
	@media (min-width: $width) { @content; }
}

@mixin rwdHeight($height) {
	@media (max-height: $height) { @content; }
}

// Box-sizing Mixin
// Example usage: @include boxSizing(border-box);
@mixin boxSizing($box) {
	@each $prefix in -webkit-, '' {
		#{$prefix}box-sizing: $box;
	}
}

// Box-shadow Mixin
// Example usage: @include boxShadow(0 10px 5px 0 rgba(0, 0, 0, .5));
@mixin boxShadow($value...) {
	@each $prefix in -webkit-, '' {
		#{$prefix}box-shadow: $value;
	}
}

// Transition Mixin
// Example usage: @include transition(all, .3s, ease-out);
@mixin transition($what, $time, $how: null) {
	@each $prefix in -webkit-, -o-, '' {
		#{$prefix}transition: $what $time $how;
	}

	@if $how {
		transition-timing-function: $how;
	} @else {
		transition-timing-function: ease-out;
	}
}

// Transition Delay Mixin
// Example usage: @include transitionDelay(.1s);
@mixin transitionDelay($delay) {
	@each $prefix in -webkit-, -o-, '' {
		#{$prefix}transition-delay: $delay;
	}
}

// Transform Mixin (for multiple transforms)
// Example usage: @include transform(translate(-75%, -50%) rotate(45deg));
@mixin transform($transforms) {
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}transform: $transforms;
	}
}

// Rotate Mixin
// Example usage: @include rotate(45deg);
@mixin rotate($deg) {
	@include transform(rotate($deg));
}

// Scale X, Y, XY Mixin
// Example usage: @include scaleXY(1.2, 1.2);
@mixin scaleXY($x, $y) {
	@include transform(scale($x, $y));
}

@mixin scaleX($x) {
	@include transform(scaleX($x));
}

@mixin scaleY($y) {
	@include transform(scaleY($y));
}

// Translate X, Y, XY Mixin
// Example usage: @include translateXY(100px, 100px);
@mixin translateXY($x, $y) {
	@include transform(translate($x, $y));
}

@mixin translateX($x) {
	@include transform(translateX($x));
}

@mixin translateY($y) {
	@include transform(translateY($y));
}

// Skew X, Y, XY Mixin
// Example usage: @include skewXY(10px, 10px);
@mixin skewXY($x, $y) {
	@include transform(skew($x, $y));
}

@mixin skewX($x) {
	@include transform(skewX($x));
}

@mixin skewY($y) {
	@include transform(skewY($y));
}

// Transform Origin Mixin
// Example usage: @include transformOrigin(center bottom);
@mixin transformOrigin($origin) {
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}transform-origin: $origin;
	}
}

// rem
@function parseInt($n) {
	@return $n / ($n * 0 + 1); // Parse integer from value
}

@mixin rem($property, $values) {
	$px: ();
	$rem: ();

	@each $value in $values {
		@if $value == 0 or $value == auto {
			$px: append($px, $value);
			$rem: append($rem, $value);
		} @else {
			$unit: unit($value);
			$val: parseInt($value);

			@if $unit == 'px' {
				$px: append($px, $value);
				$rem: append($rem, ($val / 16) + rem);
			}

			@if $unit == 'rem' {
				$px: append($px, ($val * 16) + px);
				$rem: append($rem, $value);
			}
		}
	}

	@if $px == $rem {
		#{$property}: $px;
	} @else {
		#{$property}: $rem;
		@include breakpoint(maxMobile) {
			#{$property}: $px;
		}
	}
}

// vw
@mixin vw($property, $values) {
	$px: ();
	$vw: ();

	@each $value in $values {
		@if $value == 0 or $value == auto {
				$px: append($px, $value);
				$vw: append($vw, $value);
		} @else {
			$unit: unit($value);
			$val: parseInt($value);
			$max-mobile: 720;
			$vw-context: ($max-mobile * 0.01) * 1;

			@if $unit == 'px' {
				$px: append($px, $value);
				$vw: append($vw, (($val / $vw-context) * 1) + vw);
			}

			@if $unit == 'vw' {
				$px: append($px, ($val * 16) + px);
				$vw: append($vw, $value);
			}
		}
	}

	@if $px == $vw {
		#{$property}: $px;
	} @else {
		#{$property}: $vw;
		@include breakpoint(maxMobile) {
			#{$property}: $px;
		}
	}
}

// Function to get viewport width
@function get-vw($target) {
	$vw-context: ($max-mobile * 0.01) * 1px;
	@return ($target / $vw-context) * 1vw;
}

// percent
@function percent($target, $parent: $max-mobile) {
	@return percentage($target / $parent);
}

// animation
@mixin animation($name, $duration, $iteration: null, $timing: null, $reverse: null) {
	@-webkit-keyframes #{$name} {
		@content;
	}

	@keyframes #{$name} {
		@content;
	}

	animation-name: $name;
	animation-duration: $duration;

	@if $iteration {
		animation-iteration-count: $iteration;
	} @else {
		animation-iteration-count: 1;
	}

	@if $timing {
		animation-timing-function: $timing;
	} @else {
		animation-timing-function: ease;
	}

	@if $reverse {
		animation-direction: $reverse;
	} @else {
		animation-direction: normal;
	}
}

// animation delay
@mixin animationDelay($delay) {
	@each $prefix in -webkit-, '' {
		#{$prefix}animation-delay: $delay;
	}
}

// linear-gradient
@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
}

// radial-gradient
@mixin radial-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-radial-gradient(legacy-direction($direction), $color-stops);
	background: radial-gradient($direction, $color-stops);
}

// background
@mixin bg($color: null, $url: null, $repeat: null, $position: null, $size: null) {
	@if $color {
		background-color: $color;
	}

	@if $url {
		background-image: url($url);
	}

	@if $repeat {
		background-repeat: $repeat;
	} @else {
		background-repeat: no-repeat;
	}

	@if $position {
		background-position: $position;
	} @else {
		background-position: center top;
	}

	@if $size {
		background-size: $size;
	} @else {
		background-size: auto;
	}
}

// multiple text ellipsis
@mixin multipleEllipsis($line) {
	display: -webkit-box;
	overflow: hidden;
	-o-text-overflow: ellipsis;
	text-overflow: ellipsis;
	-webkit-line-clamp: $line;
	-webkit-box-orient: vertical;
	word-wrap: break-word;
}

// flex
@mixin flex($direction: row, $justify: center, $align: center, $wrap: nowrap) {
	display: flex;
	flex-direction: $direction;
	justify-content: $justify;
	align-items: $align;
	flex-wrap: $wrap;
}
